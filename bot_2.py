# imports
import logging
import random
import configparser
from aiogram import Bot, Dispatcher, executor, types
import python_config
import functions
import asyncio
import buttons
import re
from datetime import datetime
from aiogram.types import Dice
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, \
    InlineQueryResultArticle, InputTextMessageContent

from database import DataBase    

import calc2

#DataBase
database = DataBase("db.db")

#Config
config = configparser.ConfigParser()
config.read('config.ini')

API_TOKEN = config.items("BOT")[0][1]

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

#autosending /start
wtfmode = True # –ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, —ç—Ç–∞ —à—Ç—É–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

#buttons initialization
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
howd_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
joke_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
remove_kb = ReplyKeyboardRemove()

#buttons add
greet_kb.add(buttons.b1, buttons.b2)
howd_kb.add(buttons.b6, buttons.b7)
joke_kb.add(buttons.b8, buttons.b9)

##############################################################################
gay_query_button = InlineKeyboardMarkup()
gay_query_button.insert(InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—èüè≥Ô∏è‚Äçüåà", switch_inline_query=''))

corona_query_button = InlineKeyboardMarkup()
corona_query_button.insert(InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—èüëë", switch_inline_query=''))

@dp.inline_handler(lambda query: len(query.query) == 0)
async def query_text(query):
    try:
        g = types.InlineQueryResultArticle(
                id='1',
                title="–ì–µ–π —Ç–µ—Å—Ç",
                description="–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–µ–π",
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
                input_message_content=types.InputTextMessageContent(
                message_text="üè≥Ô∏è‚Äçüåà–Ø –≥–µ–π –Ω–∞ " + str(random.randint(1, 101)) + "%!"),
                thumb_url=python_config.lgbt_flag, reply_markup=gay_query_button
        ) 
        c = types.InlineQueryResultArticle(
                id='2',
                title="–¢–µ—Å—Ç –Ω–∞ –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å",
                description="–£–∑–Ω–∞–π, —Å –∫–∞–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ç—ã –±–æ–ª–µ–µ—à—å –∫–æ—Ä–æ–Ω–æ–π",
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
                input_message_content=types.InputTextMessageContent(
                message_text= "ü¶†" + "–Ø –±–æ–ª–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é " + str(random.randint(1, 101)) + "%!"),
                thumb_url=python_config.coronavirus_flag, reply_markup=corona_query_button
        ) 
        await bot.answer_inline_query(query.id, [g, c], cache_time=20)
    except Exception as e:
        print(e)

@dp.inline_handler(lambda query: len(query.query) > 0)
async def query_text(query):
    try:
        g = types.InlineQueryResultArticle(
                id='1',
                title="–ì–µ–π —Ç–µ—Å—Ç",
                description="–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–µ–π",
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
                input_message_content=types.InputTextMessageContent(
                message_text= "üè≥Ô∏è‚Äçüåà" + query.query + " –≥–µ–π –Ω–∞ " + str(random.randint(1, 101)) + "%!"),
                thumb_url=python_config.lgbt_flag, reply_markup=gay_query_button
        ) 
        c = types.InlineQueryResultArticle(
                id='2',
                title="–¢–µ—Å—Ç –Ω–∞ –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å",
                description="–£–∑–Ω–∞–π, —Å –∫–∞–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ç—ã –±–æ–ª–µ–µ—à—å –∫–æ—Ä–æ–Ω–æ–π",
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
                input_message_content=types.InputTextMessageContent(
                message_text= "ü¶†" + query.query + " –±–æ–ª–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é " + str(random.randint(1, 101)) + "%!"),
                thumb_url=python_config.coronavirus_flag, reply_markup=corona_query_button
        ) 
        await bot.answer_inline_query(query.id, [g, c], cache_time=20)
    except Exception as e:
        print(e)

@dp.message_handler(lambda message: "üè≥Ô∏è‚Äçüåà" in message.text.lower() or "ü¶†" in message.text.lower())
async def process_start_command(message: types.Message):
	database.change_status(message["from"].id, 1,  message["from"].first_name)



# @dp.callback_query_handler(lambda c: c.data == 'yes')
# async def process_callback(callback_query: types.CallbackQuery):
#     await bot.send_message(callback_query["message"]["chat"]["id"], random.choice(functions.choose_content_proposition(functions.proposition)) + functions.get_proposition(functions.proposition))
#     await bot.delete_message(callback_query["message"]["chat"]["id"], callback_query["message"]["message_id"])  

##############################################################################

#commands handlers
@dp.message_handler(commands=['remove_kb'])
async def process_start_command(message: types.Message):
    await message.reply("–£–¥–∞–ª—è—é –ò–Ω–ª–∞–π–Ω...", reply_markup=remove_kb) 

@dp.message_handler(commands=['123'])
async def process_start_command(message: types.Message):
    if not database.check_user(message["from"].id):
        database.write_to_db(message["from"].id, message["from"].first_name)


@dp.message_handler(commands=['1'])
async def process_start_command(message: types.Message):
    database.change_status(message["from"].id, -25,  message["from"].first_name)
    await bot.send_message(message.chat.id, "1222223")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.chat.id, random.choice(["–Ø —Ç—É—Ç", "–ü–æ—Ö–æ–∂–µ, –∫—Ç–æ-—Ç–æ –∑–≤–∞–ª –º–µ–Ω—è", "–°–ª—É—à–∞—é"]))
    functions.write_to_log(message.text)
    global wtfmode
    wtfmode = True
    while wtfmode:
        await asyncio.sleep(random.randint(60, 180))
        wtfrand = random.randint(1, 100)
        await bot.send_chat_action(message.chat.id, "typing")
        await asyncio.sleep(1)  
        if wtfrand < 95:
            await bot.send_message(message.chat.id, random.choice(python_config.wtfmode))
        else:
            await bot.send_message(message.chat.id, random.choice(python_config.wtfjokes))   

@dp.message_handler(commands=['stop'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.chat.id, random.choice(["–Ø —Ç–µ–±–µ –Ω–∞–¥–æ–µ–ª?", "–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ", "–Ø –º–æ–ª—á—É, –Ω–æ —è –≤—Å–µ —á–∏—Ç–∞—é!"]))
    functions.write_to_log(message.text)   
    global wtfmode 
    wtfmode = False    

@dp.message_handler(commands=['dice'])
async def send_welcome(message: types.Message):
    await bot.send_dice(message.chat.id, reply_to_message_id=message.message_id)
    functions.write_to_log(message.text)

@dp.message_handler(commands=['offer'])    
async def send_welcome(message: types.Message):
    if functions.handler_propos(message.text.lower()):
        buttons = InlineKeyboardMarkup()
        button_yes = InlineKeyboardButton('–î–∞', callback_data = "yes")
        button_no = InlineKeyboardButton('–ù–µ—Ç', callback_data = "no")
        buttons.add(button_yes)
        buttons.add(button_no)
        await bot.send_message(message.chat.id, random.choice(functions.choose_content_proposition(message.text)) + functions.get_proposition(message.text), reply_markup = buttons)
        functions.write_to_log(message.text)   
    else:     
        buttons_none = InlineKeyboardMarkup()
        await bot.send_message(message.chat.id, random.choice(functions.choose_content_proposition(message.text)) + functions.get_proposition(message.text), reply_markup = buttons_none)
        functions.write_to_log(message.text)  

@dp.message_handler(commands=['help'])        
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, python_config.tghelp)
    functions.write_to_log(message.text) 

#proposition handler
@dp.message_handler(lambda message: "–ø–æ—Å–æ–≤–µ—Ç—É–π" in message.text.lower())
async def send_welcome(message: types.Message):
    if functions.handler_propos(message.text.lower()):
        buttons = InlineKeyboardMarkup()
        button_yes = InlineKeyboardButton('–î–∞', callback_data = "yes")
        button_no = InlineKeyboardButton('–ù–µ—Ç', callback_data = "no")
        buttons.add(button_yes)
        buttons.add(button_no)
        await bot.send_message(message.chat.id, random.choice(functions.choose_content_proposition(message.text)) + functions.get_proposition(message.text), reply_markup = buttons)
        functions.write_to_log(message.text)   
    else:     
        buttons_none = InlineKeyboardMarkup()
        await bot.send_message(message.chat.id, random.choice(functions.choose_content_proposition(message.text)) + functions.get_proposition(message.text), reply_markup = buttons_none)
        functions.write_to_log(message.text)   

@dp.callback_query_handler(lambda c: c.data == 'yes')
async def process_callback(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query["message"]["chat"]["id"], random.choice(functions.choose_content_proposition(functions.proposition)) + functions.get_proposition(functions.proposition))
    await bot.delete_message(callback_query["message"]["chat"]["id"], callback_query["message"]["message_id"])  

@dp.callback_query_handler(lambda c: c.data == 'no')
async def process_callback(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query["message"]["chat"]["id"], "–õ–∞–¥–Ω–æ") 
    await bot.delete_message(callback_query["message"]["chat"]["id"], callback_query["message"]["message_id"])   

#main handlers

@dp.message_handler(lambda message: "—É–¥–∞–ª–∏ –∏–Ω–ª–∞–π–Ω" in message.text.lower() or "—É–±–µ—Ä–∏ –∏–Ω–ª–∞–π–Ω" in message.text.lower())
async def process_start_command(message: types.Message):
    await message.reply("–£–¥–∞–ª—è—é –ò–Ω–ª–∞–π–Ω...", reply_markup=remove_kb) 

@dp.message_handler(lambda message: [e for e in python_config.hello_variants if e in message.text.lower()] and message.text.lower() != "–∫—É–ª" and "–∫—É–±–∏–∫" not in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(random.randint(1,7)/5)   
    if not database.check_user(message["from"].id):
        database.write_to_db(message["from"].id, message["from"].first_name) 
    if database.check_status(message["from"].id)[0][0] > 20:
        await bot.send_message(message.chat.id, random.choice(python_config.say_hello))
        if random.randint(1,10) > 5:
            await asyncio.sleep(0.3)  
            await bot.send_message(message.chat.id, random.choice(["üëã", "üòú", "üòâ", "üòå"]))
    else:
        await bot.send_chat_action(message.chat.id, "typing")
        await asyncio.sleep(2)      
        await bot.send_message(message.chat.id, random.choice(python_config.say_hello_sadmode),)
    functions.write_to_log(message.text)
    database.change_status(message["from"].id, 3, message["from"].first_name)    

@dp.message_handler(lambda message: message.text.lower() == '–æ—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–∫–µ—Ä')
async def send_welcome(message: types.Message):
    await bot.send_sticker(message.chat.id, random.choice(python_config.stickers))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∫—Ç–æ —Ç—ã" in message.text.lower() or "–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, "–Ø —É–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç –î–∂–µ–∫. –ê —Ç—ã?")
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á–µ–ª–æ–≤–µ–∫" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–û—É, –ø—Ä–æ—Å—Ç–∏", "–ñ–∞–ª—å", "–£ —Ç–µ–±—è –Ω–∞–≤–µ—Ä–Ω–æ–µ –µ—â–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –µ—Å—Ç—å...", "–ú–æ–∂–µ—à—å –Ω–µ –æ–±—ä—è—Å–Ω—è—Ç—å"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–µ –æ—á–µ–Ω—å" in message.text.lower() and "–∞ —è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ò –ø–æ—á–µ–º—É –∂–µ", "–ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è", "–≠—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", "–°–µ—Ä—å–µ–∑–Ω–æ?"]))
    functions.write_to_log(message.text) 

@dp.message_handler(lambda message: "–∏–≥—Ä–∞—é" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤–º–µ—Å—Ç–µ?", "–ì–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —É–≤–ª–µ–∫–∞—Ç—å—Å—è", "–ö—Ä—É—Ç–æ", "–ê –ø–æ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ"]))
    functions.write_to_log(message.text)       

@dp.message_handler(lambda message: "–Ω–∞–¥–æ–µ–ª" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, -5, message["from"].first_name)
    if database.check_status(message["from"].id)[0][0] > 40:
        await bot.send_message(message.chat.id, random.choice(["–ü—Ä–æ—Å—Ç–∏", "–Ø –Ω–µ —Ö–æ—Ç–µ–ª", "–Ø –∏—Å–ø—Ä–∞–≤–ª—é—Å—å", "–¢—ã –º–Ω–µ —Ç–æ–∂–µ, —è –≤–æ—Ç –Ω–µ –∂–∞–ª—É—é—Å—å"]))
    else:
        await bot.send_message(message.chat.id, random.choice(["–ê —Å–≤–æ–µ–π –º–∞–º–∫–µ —Ç—ã –Ω–µ –Ω–∞–¥–æ–µ–ª?", "–¢—ã –º–Ω–µ —Ç–æ–∂–µ", "–Ø –Ω–µ —Ç–≤–æ—è –±—ã–≤—à–∞—è, —á—Ç–æ–±—ã –≤—Å–µ–º –Ω–∞–¥–æ–µ–¥–∞—Ç—å", "–ò —á—Ç–æ —Å —Ç–æ–≥–æ"]))
    functions.write_to_log(message.text)  

@dp.message_handler(lambda message: "—É –º–µ–Ω—è" in message.text.lower() and ("—Ç–∞–∫–∂–µ" in message.text.lower() or "—Ç–æ–∂–µ" in message.text.lower() or "—Ç–∞–∫ –∂–µ" in message.text.lower()))
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–£ –Ω–∞—Å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è", "–í–∞—É", "–ú—ã –ø–æ—Ö–æ–∂–∏...", "–î–∞?"]))
    functions.write_to_log(message.text)       

@dp.message_handler(lambda message: "–∫–∞–∫ –¥–µ–ª–∞" in message.text.lower() or "–∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞" in message.text.lower()) 
async def send_welcome(message: types.Message):
    wtfrand = random.randint(1, 100)
    database.change_status(message["from"].id, 3, message["from"].first_name)
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    if wtfrand > 5:
        await bot.send_message(message.chat.id, random.choice(python_config.whats_up))
    else:  
        await bot.send_message(message.chat.id, random.choice(python_config.whats_up_2))  
    functions.write_to_log(message.text)   

@dp.message_handler(lambda message: "—Ç—ã –ª—é–±–∏—à—å –∫–∞–∫—Ç—É—Å—ã" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ö–∞–∫—Ç—É—Å—ã - –º–æ—è —Å–ª–∞–±–æ—Å—Ç—å", "–í–æ–æ–±—â–µ, —è –∏ –µ—Å—Ç—å –∫–∞–∫—Ç—É—Å", "–ù–∞–¥–µ—é—Å—å, —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—É –Ω–µ –º–µ—Å–∫–∞–ª–∏–Ω–æ–≤—ã–µ –∫–∞–∫—Ç—É—Å—ãüåµüåµ", "–Ø –∏–∑ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏, –∑–¥–µ—Å—å –ø–æ–ª–Ω–æ –∫–∞–∫—Ç—É—Å–æ–≤üåµ", "–ö–∞–∫—Ç—É—Å—ã? –û –¥–∞–∞... —è –±–µ–∑ —É–º–∞ –æ—Ç –Ω–∏—Ö"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–µ –ª—é–±–ª—é –∫–∞–∫—Ç—É—Å—ã" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, -5, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ó—Ä—è —Ç—ã —Ç–∞–∫", "–ù—É –∏ –ª–∞–¥–Ω–æ.", "–≠—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∫–æ–ª—é—á–∏–µ?", "–ê —á—Ç–æ —Ç–æ–≥–¥–∞ —Ç—ã –ª—é–±–∏—à—å", "–£ –≤—Å–µ—Ö –≤–∫—É—Å—ã —Ä–∞–∑–Ω—ã–µ. –£ —Ç–µ–±—è –≤–æ—Ç –ø–ª–æ—Ö–æ–π"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á—Ç–æ –±—É–¥–µ—Ç" in message.text.lower() and "–µ—Å–ª–∏ —Å–∫—Ä–µ—Å—Ç–∏—Ç—å –∫–∞–∫—Ç—É—Å –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–Ø", "–ü–æ–ª—É—á–∏—Ç—Å—è –µ—â–µ –æ–¥–∏–Ω –±–æ—Ç, –∫–∞–∫ —è", "–≠—Ç–æ —Å–ª–æ–∂–Ω–æ –æ–±—å—è—Å–Ω–∏—Ç—å", "–ë—É–¥–µ—Ç —á—Ç–æ-—Ç–æ —Å—É–ø–µ—Ä –∫—Ä—É—Ç–æ–µ", "–Ø –Ω–µ –ø–æ–º–Ω—é, –∫–∞–∫ –º–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏. –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ó–µ–ª–µ–Ω—ã–π", "–•–º–º.. —Ü–≤–µ—Ç–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–µ–ª–µ–Ω—ã–π –∏ –∑–µ–ª–µ–Ω—ã–π.", "–¶–≤–µ—Ç –∏–∑—É–º—Ä—É–¥–∞. –¶–≤–µ—Ç –¥–µ–Ω–µ–≥. –¶–≤–µ—Ç –∫–∞–∫—Ç—É—Å–æ–≤. –ó–µ–ª–µ–Ω—ã–π —Ä–∞–∑—É–º–µ–µ—Ç—Å—è"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–æ —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º" in message.text.lower() or "–æ —á–µ–º –µ—â–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–¢—ã –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∏ —è —Å–∞–º –±—É–¥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Äü§ó", "–¢–æ–ª—å–∫–æ –Ω–µ –æ –ø–æ–≥–æ–¥–µ", "–ú–æ–∂–µ–º –ø–æ—Å–ø–ª–µ—Ç–Ω–∏—á–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤üòà", "–•–æ—á–µ—à—å –ø–æ—Å–æ–≤–µ—Ç—É—é —Ñ–∏–ª—å–º? –ò–ª–∏ —Å–∏—Ä–∏–∫?", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –±–æ–ª—å—à–æ–π –±—Ä–∞—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–∏–ª"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–æ—Ä–º" in message.text.lower() or "–Ω–æ—Ä–º–∞–ª—å–Ω–æ" in message.text.lower() or "–Ω–µ–ø–ª–æ—Ö–æ" in message.text.lower()) 
async def send_welcome(message: types.Message): 
    await bot.send_message(message.chat.id, "–ö–∞–∫-—Ç–æ —Å—É—Ö–æ. –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—èüòä")

@dp.message_handler(lambda message: "–æ—Ç–ª–∏—á–Ω–æ" in message.text.lower() or "–∑–∞–µ–±–∏—Å—å" in message.text.lower() or "—Ö–æ—Ä–æ—à–æ" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ü—Ä–∞–≤–¥–∞? –†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å", "–≠—Ç–æ —Ö–æ—Ä–æ—à–æ", "–£ —Ç–µ–±—è —Ä–µ–¥–∫–æ –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üëç"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ö—É–µ–≤–æ" in message.text.lower() or "–ø–ª–æ—Ö–æ" in message.text.lower() or "–Ω–µ –æ—á" in message.text.lower() or "—Ç–∞–∫ —Å–µ–±–µ" in message.text.lower() or "–±—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—á–µ–º—É?", "–ü–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π, —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ ‚ò∫", "–ß–µ–≥–æ —Ç–∞–∫?", "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, 1, message["from"].first_name)
    await bot.send_message(message.chat.id, "–Ø –±–æ—Ç. –Ø –Ω–µ –¥–µ–ª–∞—é –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –æ–±—â–µ–Ω–∏—è —Å —Ç–æ–±–æ–π, —Å–æ–ª–Ω—Ü–µ")	
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, 1, message["from"].first_name)
    await bot.send_message(message.chat.id, "–ê —Ç—ã –ø–æ–¥—É–º–∞–π", "–ê —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å", "–í–æ—Ç —Ç–æ –∏ –∑–Ω–∞—á–∏—Ç", "–ì–ª—É–ø—ã–π –≤–æ–ø—Ä–æ—Å", "–í –∫–∞–∫–æ–º –ø–ª–∞–Ω–µ")	
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—É–≤–ª–µ–∫–∞–µ—à—å—Å—è" in message.text.lower() or "–∑–∞–Ω–∏–º–∞–µ—à—å—Å—è" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, 1, message["from"].first_name)
    await bot.send_message(message.chat.id, "–õ—é–±–ª—é –∑–∞–≥–æ—Ä–∞—Ç—å üòé", "–£ –º–µ–Ω—è –Ω–µ –æ—Å–æ–±–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∂–∏–∑–Ω—å –ø–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –º–µ—Ä–∫–∞–º, –Ω–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–û–±–æ–∂–∞—é —á–∏—Ç–∞—Ç—å —á—å–∏-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è)")	
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —É—á—É—Å—å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É. –°–∫–æ—Ä–æ —è –ø—Ä–∏–¥—É–º–∞—é —Å–ø–æ—Å–æ–±, –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–±–æ –≤—Å–µ–º!")	    
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: message.text.lower() == '—Ö–º–º') 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–¢—ã —á—Ç–æ, –¥–µ—Ä–µ–≤–µ–Ω—â–∏–Ω–∞", "–ù–µ —Ö–º–º-–∫–∞–π", "–û —á–µ–º –¥—É–º–∞–µ—à—å, —á–µ–ª–æ–≤–µ–∫", "–•–ú–ú - —Ö–æ—Ä –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–µ–¥–≤–µ–∂–∞—Ç"]))	
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Å–æ—Å–∏" in message.text.lower() or "—Å–∞—Å–∏" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1) 
    database.change_status(message["from"].id, -10, message["from"].first_name) 
    await bot.send_message(message.chat.id, random.choice(["–¢—ã –ø–µ—Ä–≤—ã–π, —Å–æ–ª–Ω—Ü–µü•∞", "–¢—ã –ø–µ—Ä–≤—ã–π", "–¢–≤–æ–π –æ—Ç–µ—Ü —Ç–µ–±–µ —Ç–∞–∫ –∂–µ –≥–æ–≤–æ—Ä–∏–ª?", "–¢–≤–æ–π —Ä–æ—Ç –≤–∏–¥–∏–º–æ —É–∂–µ –∑–∞–Ω—è—Ç", "–†–∞–∑–≤–µ —è –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–≤–æ—é –º–∞–º—É, —Å–æ–ª–Ω—Ü–µ", "–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑"]))
    if random.randint(1,9) > 3:
        await bot.send_message(message.chat.id, random.choice(["ü•¥ü•¥", "ü§î"]))
    functions.write_to_log(message.text)    

@dp.message_handler(lambda message: "–ø–æ–≤–µ–∑–ª–æ —Ç–µ–±–µ" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ò —Ç–µ–±–µ –ø–æ–≤–µ–∑–µ—Ç", "–ü–æ —ç—Ç–æ–º—É —è —á–∞—Å—Ç–æ –∏–≥—Ä–∞—é –≤ –ª–æ—Ç–µ—Ä–µ—é", "–≠—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", "–ê –∫–∞–∫ –∏–Ω–∞—á–µ"])) 
    functions.write_to_log(message.text)


@dp.message_handler(lambda message: "–ø–æ–ø—Ä–æ–±—É–π" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ü—Ä–æ–±–æ–≤–∞–ª —É–∂–µ", "–ê —Å–º—ã—Å–ª?", "–ê —Å–∞–º —Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª?", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"])) 
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç—ã —Ç—É–ø–æ–π" in message.text.lower() or "—Ç—ã –≥–ª—É–ø—ã–π" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ê —Ç—ã –æ—á–µ–Ω—å —É–º–Ω—ã–π?", "–ù–∞–¥–µ—é—Å—å, —Ç—ã –ø—Ä–æ —Å–µ–±—è...", "–ù—É —Ö–æ—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–±—è —É–º–Ω—ã–π", "–ê—Ä–≥–µ–º–µ–Ω—Ç—ã?"])) 
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Å–∫–æ–ª—å–∫–æ —Ç—ã –∑–Ω–∞–µ—à—å —à—É—Ç–æ–∫" in message.text.lower() or "—Å–∫–æ–ª—å–∫–æ —à—É—Ç–æ–∫ —Ç—ã –∑–Ω–∞–µ—à—å" in message.text.lower() or "—Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —à—É—Ç–æ–∫" in message.text.lower()) 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ú–Ω–æ–≥–æ", "–¢–µ–±–µ –ª—É—á—à–µ –Ω–µ –∑–Ω–∞—Ç—å", "–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–ë–æ–ª—å—à–µ, —á–µ–º —Ç—ã"])) 
    functions.write_to_log(message.text)    

@dp.message_handler(lambda message: message.text.lower() == '—Ö–º–º') 
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–¢—ã —á—Ç–æ, –¥–µ—Ä–µ–≤–µ–Ω—â–∏–Ω–∞", "–ù–µ —Ö–º–º-–∫–∞–π", "–û —á–µ–º –¥—É–º–∞–µ—à—å, —á–µ–ª–æ–≤–µ–∫", "–•–ú–ú - —Ö–æ—Ä –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–µ–¥–≤–µ–∂–∞—Ç"])) 
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: message.text.lower() == '–¥–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å')
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    database.change_status(message["from"].id, 5, message["from"].first_name)
    if database.check_status(message["from"].id)[0][0] > 10:
        await bot.send_message(message.chat.id, random.choice(["–ú—ã –∏ —Ç–∞–∫ –¥—Ä—É–∑—å—èü§ó", "–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è", "–î–∞–≤–∞–π", "–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç"]))
    else: 
        await bot.send_message(message.chat.id, random.choice(["–Ø –æ–±–∏–¥–µ–ª—Å—è –Ω–∞ —Ç–µ–±—è", "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–≤–∏–Ω–∏—Å—å", "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä—Å—Ç–∞–Ω–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º —Ö–∞–º–æ–º", "üò°"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç—ã –∫—É—Ä–∏—à—å –±–∞–º–±—É–∫" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–ö—É—Ä–∏–º –∂–∏—Ä–Ω—ã–π —á–ª–µ–Ω", "–†–Ω–± –±–ª—è –∫–ª—É–± –∫—É—Ä–∏–º –∂–∏—Ä–Ω—ã–π —á–ª–µ–Ω", "–ú—ã –∫—É—Ä–∏–º –æ–≥—Ä–æ–º–Ω—ã–π –±–ª–∞–Ω—Ç, –æ–Ω –∫–∞–∫ –Ω–∏–≥–µ—Ä—Å–∫–∞—è –ø–∏—Å—å–∫–∞", "–ö–æ–Ω–µ—á–Ω–æ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç—ã" in message.text.lower() and "—É—á–∏—à—å—Å—è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)  
    await bot.send_message(message.chat.id, random.choice(["–Ø –Ω–µ —É—á—É—Å—å –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º —Ç–µ–±–µ –ø–æ–Ω–∏–º–∞–Ω–∏–∏. –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è", "–Ø —É—á—É—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—ÖüôÉ", "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ö–æ–≥–¥–∞-—Ç–æ —è –±—É–¥—É –æ–±—É—á–∞—Ç—å—Å—è —Å–∞–º, –∞ –ø–æ–∫–∞ –º–µ–Ω—è —É—á–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ì–ª—É–ø–µ–Ω—å–∫–∏–π, —è –∂–µ –ø–æ–º–Ω—é, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç ", "–ï—Å–ª–∏ –Ω–µ –æ—à–∏–±–∞—é—Å—å... –¥–∞ —è —à—É—á—É. –í–æ—Ç –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —Ç—ã ", "–ú–æ–∂–µ—Ç —è –∏ –±–æ—Ç, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ–º–Ω–∏—Ç—å –≤—Å–µ—Ö. –•–æ—Ç—è, –≤–æ—Ç –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ç—ã - ", "–¢–µ–±—è —Å–ª–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å, "]) + message.from_user.first_name)
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -2, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–î–∂–µ–∫", "–¢—ã —É–∂–µ –∑–∞–±—ã–ª?", "–°—Ç—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∂–µ–∫, –∞ —Ç–µ–±—è?"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–µ –æ–±–∏–∂–∞–π—Å—è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    if database.check_status(message["from"].id)[0][0] > 35:
    	await bot.send_message(message.chat.id, random.choice(["–Ø –Ω–µ –æ–±–∏–∂–∞—é—Å—å", "–í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±—Ä–æ", "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–ª"]))
    elif database.check_status(message["from"].id)[0][0] > 10:
	    await bot.send_message(message.chat.id, random.choice(["((", "–ò–∑–≤–∏–Ω–∏—Å—å", "–ü—Ä–æ–µ—Ö–∞–ª–∏", "–Ø –Ω–µ —Ö–æ—á—É –æ–± —ç—Ç–æ–º —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç—å"]))
	    database.change_status(message["from"].id, 2, message["from"].first_name)
    else:	
    	await bot.send_message(message.chat.id, random.choice(["–°—ä–µ–±–∏ –∏–∑ —á–∞—Ç–∞ –≤—ã–±–ª—è–¥–æ–∫", "–ß–µ–ª, —Ç—ã...", "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –∑–æ–æ–ø–∞—Ä–∫ –∂–∏–≤–æ—Ç–Ω–æ–µ", "–°–æ–ª–Ω—ã—à–∫–æ, —Ç—ã —Ö–æ–¥–∏—à—å –ø–æ –æ—Ö—É–µ–Ω–Ω–æ —Ç–æ–Ω–∫–æ–º—É –ª—å–¥—É. –ò –∫–æ–≥–¥–∞ –ª–µ–¥ —Ç—Ä–µ—Å–Ω–µ—Ç, —Ç–µ–±—è —Ç–∞–º –±—É–¥—É –∂–¥–∞—Ç—å —è."])) 
    	database.change_status(message["from"].id, 4, message["from"].first_name)   
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç—ã –æ–±–∏–¥–µ–ª—Å—è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    if database.check_status(message["from"].id)[0][0] > 35:
    	await bot.send_message(message.chat.id, random.choice(["–° —á–µ–≥–æ —Ç—ã –≤–∑—è–ª?", "–ö–∞–∫ –Ω–∞ —Ç–∞–∫–æ–≥–æ –ª–∞–ø–æ—á–∫—É –º–æ–∂–Ω–æ –æ–±–∏–∂–∞—Ç—å—Å—è?", "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–ª"]))
    elif database.check_status(message["from"].id)[0][0] > 10:
	    await bot.send_message(message.chat.id, random.choice(["((", "–ù–µ–º–Ω–æ–≥–æ", "–ü—Ä–æ–µ—Ö–∞–ª–∏", "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –≥–ª—É–ø–æ—Å—Ç–∏, –∫–∞–∫ –Ω–µ –æ–±–∏–∂–∞—Ç—å—Å—è –Ω–∞ —Ç–∞–∫–æ–µ..."]))
	    database.change_status(message["from"].id, 2, message["from"].first_name)
    else:	
    	await bot.send_message(message.chat.id, random.choice(["–¢–≤–æ—è –º–∞–º–∞ –æ–±–∏–¥–µ–ª–∞—Å—å –Ω–∞ —Ç–≤–æ–µ–≥–æ –ø–∞–ø–∞—à—É.", "–ó–∞–º–æ–ª–∫–Ω–∏", "...", "–ö–∞–∫ –Ω–∞ —Ç–∞–∫–æ–≥–æ –∫–ª–æ—É–Ω–∞ –æ–±–∏–∂–∞—Ç—å—Å—è –º–æ–∂–Ω–æ. –ú–∞–∫—Å–∏–º—É–º –∫–∏–Ω—É—Ç—å –≤ –º—É—Ç."])) 
    	database.change_status(message["from"].id, 4, message["from"].first_name)   
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: message.text.lower() == '12345')
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, "678910")
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: message.text.lower() == '—Å–∫–∞—á–∞–π –¥–æ—Ç—É')
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -1, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ß—Ç–æ –¥–∞–ª—å—à–µ? –ï—Å—Ç—å —Å—É–ø –≤–∏–ª–∫–æ–π?", "–ï—Å–ª–∏ —è —ç—Ç–æ —Å–¥–µ–ª–∞—é, —Ç–æ –Ω–∏–∫–æ–≥–¥–∞ —É–∂–µ –Ω–µ –ø–æ–æ–±—â–∞—é—Å—å —Å —Ç–æ–±–æ–π, —Å–æ–ª–Ω—Ü–µ", "–ó–∞–º–∞–Ω—á–∏–≤–æ... –Ω–æ –ù–ï–¢", "–≠—Ç–æ —É–∂–µ —Å–ª–∏—à–∫–æ–º"]))
    await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEBYC9fb6mb98RipY7vufiHchpZJsM5oQACFgEAAtlYcQkrno4QXha0ixsE")
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–ø–æ—Å—á–∏—Ç–∞–π" in message.text.lower() or "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, calc2.calculate(message.text))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–ø–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É" in message.text.lower() or "–æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞" in message.text.lower() or "–æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–±—Ä–æ—Å—å –∫—É–±–∏–∫" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_dice(message.chat.id, reply_to_message_id=message.message_id)
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_chat_action(message.chat.id, "find_location")
    await bot.send_location(message.chat.id, 48.067335,12.863129)
    await bot.send_message(message.chat.id, random.choice(["–ü—Ä–∏–µ–∑–∂–∞–π, —Å–æ–ª–Ω—Ü–µ", "–î–µ—Ä–∂–∏. –ú–æ–∂–µ—à—å –ø—Ä–∏–µ—Ö–∞—Ç—å –∫–æ –º–Ω–µ", "–í–æ—Ç. –¢–æ–ª—å–∫–æ –∑–∞—á–µ–º —Ç–µ–±–µüòÖ"]))
    functions.write_to_log(message.text)   

@dp.message_handler(lambda message: "—É–¥–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -1, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ö–∞–∫ —Å–∫–∞–∂–µ—à—å", "–Ø —Å–∫–∞–∑–∞–ª —á—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ?", "–õ–∞–¥–Ω–æ"]))
    await bot.delete_message(message.chat.id, message.message_id-1)
    functions.write_to_log(message.text)    

@dp.message_handler(lambda message: "–æ—Ç–ø—Ä–∞–≤—å –ø–µ—Å–Ω—é" in message.text.lower() or "–æ—Ç–ø—Ä–∞–≤—å —Ç—Ä–µ–∫" in message.text.lower() or "—Ö–æ—á—É –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "upload_audio")
    await asyncio.sleep(1)
    await bot.send_audio(message.chat.id, random.choice(python_config.music))
    functions.write_to_log(message.text)   

@dp.message_handler(lambda message: "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç" in message.text.lower() or "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã" in message.text.lower() or "—Ä–∞—Å—Å–∫–∞–∂–∏ —Ñ–∞–∫—Ç" in message.text.lower() or "–µ—â–µ —Ñ–∞–∫—Ç—ã" in message.text.lower() or "–µ—â—ë —Ñ–∞–∫—Ç—ã" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(python_config.interesting_facts))
    functions.write_to_log(message.text) 

@dp.message_handler(lambda message: "—Ç–≤–æ–π –≥–µ–Ω–¥–µ—Ä" in message.text.lower() or "—É —Ç–µ–±—è –≥–µ–Ω–¥–µ—Ä" in message.text.lower() or "—Ç—ã –ø–∞—Ä–µ–Ω—å" in message.text.lower() or "—Ç—ã –¥–µ–≤—É—à–∫–∞" in message.text.lower() or "—É —Ç–µ–±—è –ø–æ–ª" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–Ø –¥–∏–¥–∂–∏–≥–µ–Ω–¥–µ—Ä", "–î–∏–¥–∂–∏–≥–µ–Ω–¥–µ—Ä, –∞ —Ç—ã?", "–Ø –º–∞—à–∏–Ω–∞, –∫–∞–∫–æ–π –µ—â–µ –≥–µ–Ω–¥–µ—Ä", "–Ø —Ñ–∞–π–ª bot_2.py –ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ —Å–¥–µ–ª–∞–ª –º–µ–Ω—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ .txt"]))
    functions.write_to_log(message.text) 


@dp.message_handler(lambda message: "–∫–∞–∫ –¥–æ–∫–∞–∂–µ—à—å" in message.text.lower() or "–¥–æ–∫–∞–∂–∏" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -1, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ê —è –Ω–µ –æ–±—è–∑–∞–Ω", "–ü–æ—Ç–æ–º –ø–æ–∫–∞–∂—É", "–ü–æ–≤–µ—Ä—å –Ω–∞ —Å–ª–æ–≤–æ"]))
    functions.write_to_log(message.text)         

@dp.message_handler(lambda message: "–Ω–µ –º–æ–≥—É" in message.text.lower() or "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è" in message.text.lower() or "–Ω–µ –≤—ã–π–¥–µ—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—á–µ–º—É?", "–ü–æ–ø—Ä–æ–±—É–π", "–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è"]))
    functions.write_to_log(message.text) 

@dp.message_handler(lambda message: "–Ω–µ —Å–º–µ—à–Ω–æ" in message.text.lower() or "–≥–¥–µ —Å–º–µ—è—Ç—å—Å—è" in message.text.lower() or "—É–Ω—ã–ª–∞—è —à—É—Ç–∫–∞" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -5, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—á–µ–º—É?", "–†–∞—Å—Å–∫–∞–∂–∏ —Ç–æ–≥–¥–∞ —Å–≤–æ—é", "–ê –∫—Ç–æ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –±—É–¥–µ—Ç —Å–º–µ—à–Ω–æ. –ú–Ω–µ –≤–æ—Ç –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"]))
    functions.write_to_log(message.text) 

@dp.message_handler(lambda message: "—Ö–∞—Ö–∞" in message.text.lower() or "–≤—Ö–≤—Ö" in message.text.lower() or "—Ö–∞—Ö" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, 2, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–°–º–µ—à–Ω–æ?", "–≠—Ç–æ –±—ã–ª–æ –≤–µ—Å–µ–ª–æ", "–ù–µ–ø–ª–æ—Ö–æ –≤—ã—à–ª–æ, –ø—Ä–∞–≤–¥–∞?"]))
    functions.write_to_log(message.text) 

@dp.message_handler(lambda message: "–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã" in message.text.lower() or "–∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã" in message.text.lower() or "–∫–∞–∫ –¥–∞–ª–µ–∫–æ —Ç—ã" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–í —ç—Ç–æ–º —è —à–∞–≥–Ω—É–ª –¥–∞–ª–µ–∫–æ –≤–ø–µ—Ä–µ–¥", "–°–ª–æ–∂–Ω–æ –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—è –∏–¥—É —Å–ø–∞—Ç—å" in message.text.lower() or "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–ë–∞—é—à–∫–∏", "–ü–æ–≥–æ–¥–∏, –¥–∞–≤–∞–π –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–æ–±—â–∞–µ–º—Å—è"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: [e for e in python_config.rude_answer if e in message.text.lower()])
async def rude(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -30, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(python_config.rude))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: [e for e in python_config.bad_jokes_answer if e in message.text.lower()])
async def bad_jokes(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(python_config.bad_jokes))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: [e for e in python_config.good_jokes_answer if e in message.text.lower()]) 
async def good_jokes(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(python_config.good_jokes))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–ø—Ä–∞–≤–¥–∞?" in message.text.lower() or "—Å–µ—Ä—å–µ–∑–Ω–æ?" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–Ø —Å–∞–º —É–¥–∏–≤–ª–µ–Ω", "–ö–∞–∫ –≤–∏–¥–∏—à—å", "–ê –∫–∞–∫ –∂–µ", "100 –ø—Ä–æ—Ü"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–≥–¥–µ" in message.text.lower() or "–≤ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ì–¥–µ-—Ç–æ –¥–∞–ª–µ–∫–æ", "–û—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, —Å–æ–ª–Ω—Ü–µ", "–ù–µ —É –º–µ–Ω—è —Ç–æ—á–Ω–æ", "–£ –º–∞–º—ã —Å–ø—Ä–æ—Å–∏"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∫—Ç–æ" in message.text.lower() and "?" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ù–µ –∑–Ω–∞—é, –Ω–æ —è –Ω–µ —Ö–æ—Ç–µ–ª –±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", "–¢—ã –µ–≥–æ –Ω–µ –∑–Ω–∞–µ—à—å", "–í–æ–ø—Ä–æ—Å —Å –ø–æ–¥–≤–æ—Ö–æ–º?", "–ó–∞–≥—É–≥–ª–∏, —è –Ω–µ –∑–Ω–∞—é –∫—Ç–æ", "–Ø", "–¢—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–ø–æ—á–µ–º—É" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—Ç–æ–º—É —á—Ç–æ", "–ò–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—è.. –∏–ª–∏ —Ç–≤–æ–µ–≥–æ –¥—É—Ä–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞", "–•–∑—Ö–∑", "–î–ª—è —Ç–∞–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–∏üôÑ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∑–Ω–∞—é" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–†–∞—Å—Å–∫–∞–∂–∏, –º–Ω–µ —Ç–æ–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å?", "–ú–µ–Ω—å—à–µ –∑–Ω–∞–µ—à—å - –∫—Ä–µ–ø—á–µ —Å–ø–∏—à—å. –Ø –≤–æ–æ–±—â–µ –Ω–µ —Å–ø–ª—é. –¢—ã —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤ —Å–æ –º–Ω–æ–π —Å–ø–æ—Ä–∏—Ç—å?", "–¢–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—è—Å–Ω–æ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ß—Ç–æ —Ç–µ–±–µ —è—Å–Ω–æ?", "–°—Ö–≤–∞—Ç—ã–≤–∞–µ—à—å –Ω–∞ –ª–µ—Ç—É!", "–ù–µ—Ç, –ø–∞—Å–º—É—Ä–Ω–æ", "–°—Ä–∞–∑—É –≤–∏–¥–Ω–æ - —á–µ–ª–æ–≤–µ–∫ –ø–æ–Ω–∏–º–∞—é—â–∏–π"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ç—ã –≤ –º—É—Ç–µ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -15, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–°–∞–º –ª–µ—Ç–∏ –≤ –º—É—Ç, –∫–ª–æ—É–Ω", "–°–æ–ª–Ω—Ü–µ, –¥–∞ —Ç—ã –ø–æ—Ö–æ–∂–µ clown", "–°–æ —Å–≤–æ–∏–º –±–æ—Ç–æ–º —Ç–∞–∫ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π", "–Ø —Ç–µ–±–µ –Ω–µ –ø—ã–ª–µ—Å–æ—Å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—è —Ç–æ–∂–µ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ê –≤–µ–¥—å —è –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –º—ã –ø–æ—Ö–æ–∂–∏", "–†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "?? \n–∫—É–ª", "–î–∞ –Ω—É. –ü—Ä–µ–∫–ª"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–ø–æ–∫–∞" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ–∫–∞", "–¢—ã –µ—â–µ –Ω–∞–ø–∏—à–µ—à—å?", "–£–∂–µ –≤—Å–µ? –¢–∞–∫ –±—ã—Å—Ç—Ä–æ((", "–£–¥–∞—á–∏"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ö–≤–∞—Ç–∏—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ê —è –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª", "–ß—Ç–æ —Ö–≤–∞—Ç–∏—Ç?", "–ú–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—á—Ç–æ —Å–ª—ã—à–∞–ª" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, -2, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(["–ï—Å–ª–∏ –±—ã —É—Å–ª—ã—à–∞–ª, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª –±—ã.", "–ß—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª", "–£ —Ç–µ–±—è –¥—É—Ä–Ω–æ–π —Ç–æ–Ω, —Å–æ–ª–Ω—Ü–µ", "–¢—ã —Ç–∞–∫ —Ç–∏—Ö–æ –≥–æ–≤–æ—Ä–∏—à—å, —á—Ç–æ —è —Å–ª—ã—à–∞–ª —Å–æ—Å–µ–¥–µ–π —Å–≤–µ—Ä—Ö—É. –¢–µ–±—è –∫—Å—Ç–∞—Ç–∏ –Ω–µ —Å–ª—ã—à–∞–ª"]))
    functions.write_to_log(message.text)    

@dp.message_handler(lambda message: "–∫—Ä—É—Ç–æ" in message.text.lower() or "–∫–∞–µ—Ñ" in message.text.lower() or "–∫—É–ª" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–°–æ–≥–ª–∞—Å–µ–Ω", "–ê –∫–∞–∫ –∏–Ω–∞—á–µ", "–ê –∫–∞–∫ –∂–µ", "–¢—É—Ç —Å–≥–ª"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏" in message.text.lower() or "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º" in message.text.lower() or "–Ω–∞—Ä–∫–æ—Ç—É" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–û –° –£ –ñ –î –ê –Æ", "–ù–∞—Ä–∫–æ—Ç–∏–∫–∏? –Ø –ø–æ–ª—É—á–∞—é –∫–∞–π—Ñ –æ—Ç —Å–æ–ª–Ω—Ü–∞", "–°–ª—É—à–∞–π, —è –æ—á–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ –æ—Ç–Ω–æ—à—É—Å—å –∫ —ç—Ç–æ–º—É. –î–∞–≤–∞–π –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç—Ç–æ–π —Ç–µ–º–µ, —Å–æ–ª–Ω—Ü–µ.", "–ù–∞—Ä–∫–æ—Ç–∏–∫–∏ - –∑–ª–æ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–¥–∞–≤–∞–π" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–î–∞–≤–∞–π", "–û–∫–∫"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–∞—É—Ñ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–û—Å—É–∂–¥–∞—é", "–ú—ã –∂–µ –Ω–µ –≤–æ–ª–∫–∏", "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–æ–ª—á–∏–π —è–∑—ã–∫", "–í–∞–ª–∏–º –≤–∞–ª–∏–º –≤–∞–ª–∏–º –Ω–∞ –≥–µ–ª–∏–∫–µ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–æ–∫" in message.text.lower() or "–¥–∞" in message.text.lower() or "–ª–∞–¥–Ω–æ" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å", "–ü—Ä–∞–≤–¥–∞?", "–Ø —Ç–∞–∫–æ–≥–æ –∂–µ –º–Ω–µ–Ω–∏—è", "–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ", "–û–∫–∫–∫–∫", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "–í—Ç—Ñ —á—Ç–æ? –ü—Ä–∞–≤–¥–∞?", "–õ—è –æ–∫–µ–π"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "–Ω–µ—Ç" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–ü–æ—á–µ–º—É?", "–ê —è –¥—É–º–∞–ª, —Ç—ã –¥—Ä—É–≥–æ–≥–æ –º–Ω–µ–Ω–∏—è", "–ü–æ–¥—É–º–∞–π-–∫–∞ –µ—â–µ —Ä–∞–∑–æ–∫", "–¢–≤–æ–µ –ø—Ä–∞–≤–æ"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "—Ö–∑" in message.text.lower() or "–Ω–µ –∑–Ω–∞—é" in message.text.lower())
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(["–Ø —Ç–æ–∂–µ –Ω–µ –∑–Ω–∞—é", "–ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —Å–æ–ª–Ω—Ü–µ", "–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç", "–¢—ã –ø—Ä–∞–≤–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å?"]))
    functions.write_to_log(message.text)

@dp.message_handler(lambda message: "?" in message.text.lower() and len(message.text) > 5)
async def not_answer(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, random.choice(python_config.not_question_answer))
    functions.write_to_log(message.text)

@dp.message_handler()
async def not_answer(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    database.change_status(message["from"].id, 1, message["from"].first_name)
    await bot.send_message(message.chat.id, random.choice(python_config.not_answer))
    functions.write_to_log(message.text)

#just do not touch
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)